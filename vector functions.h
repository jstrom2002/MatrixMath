#ifndef VECTORFUNCTIONS_H
#define VECTORFUNCTIONS_H
#pragma once
#include "stdafx.h"
#include "vector.h"
int maxValue(int *arg, ...);
double maxValue(double *arg, ...);
double* arrmultiply(double* arr, int sz, double x);
std::vector<double> arrmultiply(std::vector<double> n, double x);
std::vector<double> arrmultiply(std::vector<double> n, std::vector<double>  x);
double arrsum(double* n, int size);
double arrsum(std::vector<double> n);
double arrsumexp(double* n, int size, double p);
double arrsumexp(std::vector<double> n, double p);
double arrmean(double* n, int sz);
double arrmean(std::vector<double> n);
std::vector<double> arrsubtract(std::vector<double> n, std::vector<double> x);
std::vector<double> arrsubtract(std::vector<double> n, double x);
std::wstring arrToString(double* v, int size);
std::wstring arrToString(std::vector<double> v);
double arrNorm(double* n, int size);
double arrNorm(std::vector<double> n);
double arrNorm(std::vector<float> n);
double* normedArray(double* n, int size);
std::vector<double> normedArray(std::vector<double> n);
double dotProduct(double* a, double* b, int length);
double dotProduct(std::vector<double> a, std::vector<double> b);
double perpDotProduct(std::vector<double> a, std::vector<double> b);
void displayarr(double* n, int size);
void displayarr(std::vector<double> n);
void displayarr(std::vector<std::wstring> n);
void displayarr(std::vector<int> n);
bool arrcheck(double* n, double x, int size);
bool arrcheck(std::vector<double> n, double x);
std::vector<double> deleteElement(std::vector<double> a, int elem);
int findPosition(std::vector<double> a, double elem);
int findPosition(std::vector<int> a, int elem);
std::vector<double> initZeros(std::vector<double> vec, int size);
double leastElement(std::vector<double> v);
double leastElement(double* v, int sz);
double greatestElement(std::vector<double> v);
int greatestElement(std::vector<int> v);
size_t greatestElement(std::vector<size_t> v);
size_t greatestElementIndex(std::vector<size_t> v);
int greatestElementIndex(std::vector<int> v);
double greatestElement(double* v, int sz);
std::vector<double> reverse(std::vector<double> a);
void sort(double* x, int size);
void sort(std::vector<double> v);
std::vector<std::vector<double>> permutations(std::vector<double> vec);
std::vector<double> removeNullValues(std::vector<double> vec);

/*template <typename T, typename A>
void removeDuplicates(std::vector<T,A> vec);*/

double mean(std::vector<double> v);
std::vector<double> toSTLVector(double* x, int size);
std::vector<long double> toSTLVector(long double* x, int size);
std::vector<ComplexNumber> toSTLVector(ComplexNumber* x, int size);
Vector toVector(double* x, int size);
std::vector<int> STLDoubleToInt(std::vector<double> x);
std::vector<double> STLIntToDouble(std::vector<int> x);
std::vector<double> randomVector(int n);
double vectorNorm(double* a, int size);
double vectorNorm(std::vector<double> a);
double* vectorUnitVector(double a[], int size);
double* vectorAddition(double a[], double b[], int size);
double* vectorAddition(std::vector<double> a, std::vector<double> b);
std::vector<double> vectorAddition2(std::vector<double> a, std::vector<double> b);
std::vector<double> vectorAddition2(double a[], double b[], int size);
double vectorDotProduct(double a[], double b[], int size);
double vectorDotProduct(std::vector<double> a, std::vector<double> b);
double vectorGetAngle(double a[], double b[], int size);
double* vectorCrossProduct2D(double a[], double b[]);
std::vector<double> vectorCrossProduct2D2(std::vector<double> a, std::vector<double> b);
double* vectorCrossProduct3D(double a[], double b[]);
std::vector<double> vectorCrossProduct3D2(std::vector<double> a, std::vector<double> b);
double vectorGetAngle(std::vector<double> a, std::vector<double> b);
double vectorScalarProjection(double a[], double b[], int size);
void vectorScalarMultiplication(double n, double a[]);
void vectorScalarMultiplication(std::vector<double> v1, double n);
std::vector<double> vectorScalarMultiplication2(std::vector<double> v1, double n);
double* vectorUnitNormal3D(double a[], double b[]);
std::vector<double> vectorUnitNormal3D2(std::vector<double> a, std::vector<double> b);
void vectorConvertCartesianToPolar(double a[]);
void vectorConvertCartesianToPolar(std::vector<double> a);
std::vector<double> vectorConvertCartesianToPolar2(std::vector<double> a);
void vectorConvertPolarToCartesian(double a[]);
std::vector<double> vectorConvertPolarToCartesian2(std::vector<double> a);
void vectorConvertRectangularToCylindrical(double a[]);
std::vector<double> vectorConvertRectangularToCylindrical2(std::vector<double> a);
void vectorConvertRectangularToSpherical(double a[]);
std::vector<double> vectorConvertRectangularToSpherical2(std::vector<double> a);
void vectorConvertCylindricalToSpherical(double a[]);
std::vector<double> vectorConvertCylindricalToSpherical2(std::vector<double> a);
void vectorConvertSphericalToRectangular(double a[]);
std::vector<double> vectorConvertSphericalToRectangular2(std::vector<double> a);
void vectorConvertCylindricalToRectangular(double a[]);
std::vector<double> vectorConvertCylindricalToRectangular2(std::vector<double> a);
//Matrix vectorChangeOfBasis2D(double a[], Matrix P);
bool vectorTestIndependence(double a[], double b[]);
double arrayPopulationVariance(std::vector<double> vec);
double arrayPopulationStandardDeviation(std::vector<double> vec);
double arraySampleVariance(std::vector<double> vec);
double arraySampleStandardDeviation(std::vector<double> vec);
double arrPopulationVariance(double* vec, int sz);
double arrPopulationStandardDeviation(double* vec, int sz);
double arrSampleVariance(double* vec, int sz);
double arrSampleVariance(std::vector<double> vec);
double arrSampleStandardDeviation(double* vec, int sz);
double arrSampleStandardDeviation(std::vector<double> vec);
template<typename T> void pop_front(std::vector<T>& vec);
void vectorList(std::vector<double> v1);
std::wstring toString(double* n, int sz);
std::wstring toString(std::vector<double> n);
std::wstring toString(std::vector<ComplexNumber> n);
void display(std::vector<double> n);
#endif